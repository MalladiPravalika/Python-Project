from abc import ABC, abstractmethod

# Define the Question class first
class Question:
    """Class to represent a single question."""
    def __init__(self, text, options, answer):
        self.text = text
        self.options = options
        self.answer = answer


class Quiz(ABC):
    """Abstract base class for a Quiz."""
    def __init__(self, question_list):
        self.question_number = 0
        self.score = 0
        self.question_list = question_list
        self.wrong_answers = []  # To track wrong answers

    @abstractmethod
    def still_has_questions(self):
        """Check if there are more questions left in the quiz."""
        pass

    @abstractmethod
    def next_question(self):
        """Ask the next question and collect the user's answer."""
        pass

    @abstractmethod
    def display_results(self):
        """Display the final results of the quiz."""
        pass


class QuizBrain(Quiz):
    """Class to manage the quiz game, inheriting from the Quiz base class."""
    def still_has_questions(self):
        """Check if there are more questions left in the quiz."""
        return self.question_number < len(self.question_list)

    def next_question(self):
        """Display the next question and collect the user's answer."""
        current_question = self.question_list[self.question_number]
        while True:  # Repeat until a valid input is provided
            print(f"\nQ{self.question_number + 1}: {current_question.text}")
            for i in range(len(current_question.options)):
                print(f"  {i + 1}. {current_question.options[i]}")
            try:
                user_choice = int(input("Your answer (enter the option number): ").strip())
                if 1 <= user_choice <= len(current_question.options):
                    user_answer = current_question.options[user_choice - 1]
                    break  # Exit the loop on valid input
                else:
                    print(f"Invalid choice. Please choose a number between 1 and {len(current_question.options)}.")
            except ValueError:
                print("Invalid input. Please enter a valid option number.")
        
        self.check_answer(user_answer, current_question)
        self.question_number += 1  # Move to the next question

    def check_answer(self, user_answer, current_question):
        """Check the user's answer and update the score."""
        if user_answer == current_question.answer:
            self.score += 1
        else:
            self.wrong_answers.append({
                "question": current_question.text,
                "your_answer": user_answer,
                "correct_answer": current_question.answer
            })

    def display_results(self):
        """Display the final score and reveal incorrect answers."""
        print("\nYou've completed the quiz!")
        print(f"Your final score is: {self.score}/{len(self.question_list)}")
        if self.wrong_answers:
            print("\nHere are the questions you answered incorrectly:")
            for i, wrong in enumerate(self.wrong_answers):
                print(f"{i + 1}. {wrong['question']}")
                print(f"   Your answer: {wrong['your_answer']}")
                print(f"   Correct answer: {wrong['correct_answer']}")
        else:
            print("Congratulations! You answered all questions correctly!")


# Question bank with multiple-choice options
question_data = [
    {"text": "What is the capital of France?", 
     "options": ["Berlin", "Madrid", "Paris", "Rome"], 
     "answer": "Paris"},
    {"text": "Which planet is known as the Red Planet?", 
     "options": ["Earth", "Mars", "Jupiter", "Venus"], 
     "answer": "Mars"},
    {"text": "Who wrote 'Romeo and Juliet'?", 
     "options": ["William Shakespeare", "Charles Dickens", "Mark Twain", "Jane Austen"], 
     "answer": "William Shakespeare"},
    {"text": "What is the largest mammal in the world?", 
     "options": ["Elephant", "Blue Whale", "Giraffe", "Rhino"], 
     "answer": "Blue Whale"},
    {"text": "Which programming language is known as the language of the web?", 
     "options": ["Python", "Java", "JavaScript", "C++"], 
     "answer": "JavaScript"}
]

# Create question objects
question_bank = [Question(data["text"], data["options"], data["answer"]) for data in question_data]

# Initialize the QuizBrain
quiz = QuizBrain(question_bank)

# Start the quiz
def start_quiz():
    print("Welcome to the QuizBrain Game!\n")
    while quiz.still_has_questions():
        quiz.next_question()
    quiz.display_results()

# Run the quiz game
if __name__ == "__main__":
    start_quiz()

